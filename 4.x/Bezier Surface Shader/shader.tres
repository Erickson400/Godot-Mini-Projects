[gd_resource type="Shader" format=3 uid="uid://c8b5o6esgwvuq"]

[resource]
code = "shader_type spatial;
render_mode cull_disabled;

uniform sampler2D icon : source_color;
uniform vec3 control_points[16];
const int SIZE = 7;
const int N = 3;

// Computes the binomial coefficient C(n, k)
// Optimized using symmetry and iterative calculation to avoid full factorials
int binomial(int n, int k) {
	if (k < 0 || k > n) {
		return 0;
	}

	if (k == 0 || k == n) {
		return 1;
	}

	int result = 1;
	for (int i = 1; i <= k; i++) {
		result = result * (n - i + 1) / i;
	}
	return result;
}

// Generates an array of Bernstein blending functions for a parameter value
void compute_blending_functions(float t, out float blending[4]) {
	for (int i = 0; i < 4; i++) {
		int binomial_coef = binomial(N, i);
		float t_term = pow(t, float(i));
		float one_minus_t_term = pow(1.0 - t, float(N - i));
		blending[i] = float(binomial_coef) * t_term * one_minus_t_term;
	}
}

void vertex() {
	float param_v = float(VERTEX_ID % SIZE);
	float param_u = float(VERTEX_ID / SIZE);
	param_u /= float(SIZE - 1);
	param_v /= float(SIZE - 1);

	float u_blending[4];
	float v_blending[4];
	compute_blending_functions(param_u, u_blending);
	compute_blending_functions(param_v, v_blending);

	vec3 point = vec3(0);
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			float blending = u_blending[i] * v_blending[j];
			point += blending * control_points[i * 4 + j];
		}
	}

	VERTEX = point;
}










void fragment() {
	vec2 resized = UV * 6.0;
	vec4 pixel = texture(icon, resized);
	ALBEDO = pixel.rgb;
}


"
